name: Advanced Documentation Deployment

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    outputs:
      docs-url: ${{ steps.deploy.outputs.page_url }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for version info
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: wrapper
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Get version info
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_release=true" >> $GITHUB_OUTPUT
        elif [[ $GITHUB_REF == refs/heads/main ]] || [[ $GITHUB_REF == refs/heads/master ]]; then
          VERSION="latest"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_release=false" >> $GITHUB_OUTPUT
        else
          VERSION="preview-$(echo $GITHUB_REF | sed 's/refs\/heads\///' | sed 's/refs\/pull\//pr-/' | sed 's/\/merge//')"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_release=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate documentation
      run: ./gradlew generateDocs --no-daemon --stacktrace
      
    - name: Add version info to docs
      run: |
        echo "<div style='background: #e3f2fd; padding: 10px; margin: 10px 0; border-radius: 4px; border-left: 4px solid #1976d2;'>" > version-info.html
        echo "<strong>üìã Documentation Version:</strong> ${{ steps.version.outputs.version }}<br>" >> version-info.html
        echo "<strong>üîß Generated from:</strong> <code>${GITHUB_SHA:0:7}</code><br>" >> version-info.html
        echo "<strong>üìÖ Generated on:</strong> $(date -u '+%Y-%m-%d %H:%M:%S UTC')<br>" >> version-info.html
        if [[ "${{ steps.version.outputs.is_release }}" == "true" ]]; then
          echo "<strong>üè∑Ô∏è Release Version</strong>" >> version-info.html
        else
          echo "<strong>üöß Development Version</strong>" >> version-info.html
        fi
        echo "</div>" >> version-info.html
        
        # Insert version info into the main index.html
        sed -i '/<\/head>/i <style>.version-info { background: #e3f2fd; padding: 10px; margin: 10px 0; border-radius: 4px; border-left: 4px solid #1976d2; }</style>' build/dokka/htmlMultiModule/index.html
        sed -i '/<body[^>]*>/r version-info.html' build/dokka/htmlMultiModule/index.html
        
    - name: Setup Pages (for main branch or tags)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
      uses: actions/configure-pages@v4
      
    - name: Upload artifact (for main branch or tags)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-pages-artifact@v3
      with:
        path: build/dokka/htmlMultiModule
        name: github-pages-${{ steps.version.outputs.version }}
        
    - name: Archive documentation artifact (for PRs)
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: docs-preview-pr-${{ github.event.number }}
        path: build/dokka/htmlMultiModule
        retention-days: 30
        
  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: generate-docs
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      with:
        artifact_name: github-pages-${{ needs.generate-docs.outputs.version }}
        
  comment-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: generate-docs
    
    steps:
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const pull_number = context.payload.pull_request.number;
          
          const comment = `## üìö Documentation Preview
          
          Documentation has been generated for this PR and is available as an artifact.
          
          **To download and view:**
          1. Go to the [Actions tab](${context.payload.repository.html_url}/actions/runs/${context.runId})
          2. Download the \`docs-preview-pr-${pull_number}\` artifact
          3. Extract and open \`index.html\` in your browser
          
          **Changes in this PR:**
          - Documentation generated from commit: \`${context.sha.substring(0, 7)}\`
          - Artifact will be available for 30 days
          
          ---
          *This comment was automatically generated by the documentation workflow.*`;
          
          github.rest.issues.createComment({
            owner,
            repo,
            issue_number: pull_number,
            body: comment
          });